/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Pantallas;

import Controlador.Base;
import Controlador.Conexion;
import Controlador.Variables;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.SwingWorker;

/**
 *
 * @author ALEJANDRO.DELGADILLO
 */
public class Generar extends javax.swing.JFrame {
    //Definir el objeto para obtener la conexion
    Conexion conexion;
    
    //Almacenara los nombres de la base de datos
    ArrayList<String> listaBaseDatos;
    
    //Almacenara el usuario de logeo
    String usuario;
    //Almacenara el password de logeo
    String password;
    //Almacenara la base de datos seleccionada
    String base;
    //Almacenara la tabla seleccionada
    String tabla;
    
    //Almacenara el nombre de los campos selecionados antes a los actuales
    String[] seleccionAnterior;
    //Almacenara el indice de los campos seleccionados antes a los actuales
    int[] posicionAnterior;
    //Definir el array que contendra los 6 combos
    JComboBox[] combos;
    
    /**
     * Creates new form Generar
     */
    public Generar() {
        initComponents();
    }
    
    public Generar(String usuario, String password, String base, String tabla){
        initComponents();
        
        //Asignar el usuario a la variable global
        this.usuario = usuario;
        //Asignar el password a la variable global
        this.password = password;
        //Asignar la base a la variable global
        this.base = base;
        //Asignar la tabla a la variable global
        this.tabla = tabla;
        
        //Crer una nueva conexion
        conexion = new Conexion();
        //Asignar el usuario a la conexion
        conexion.setUsuario(usuario);
        //Asignar el password a la conexion
        conexion.setPassword(password);
        //Asignar la base a la conexion
        conexion.setBase(base);
        
        //Poner el nombre de la base en la leyenda para ello
        jLabel11.setText(base);
        //Poner el nombre de la tabla en la leyenda para ello
        jLabel9.setText(tabla);
        
        //Crear el array que contrendra los combos
        combos = new JComboBox[6];
        //Asignar los combos a una posicion respectiva en el array
        combos[0] = jComboBox1;
        combos[1] = jComboBox2;
        combos[2] = jComboBox3;
        combos[3] = jComboBox4;
        combos[4] = jComboBox5;
        combos[5] = jComboBox6;
        
        //Crear el array que almacenara los nombres de los campos seleccionados anteriores a los actuales
        seleccionAnterior = new String[6];
        
        //Crear el array que almacenara los indices de los campos seleccionados anteriores a los actuales
        posicionAnterior = new int[6];
        
        //Agregar items de los campos a los combobox
        agregarItems();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jComboBox3 = new javax.swing.JComboBox<>();
        jComboBox4 = new javax.swing.JComboBox<>();
        jComboBox5 = new javax.swing.JComboBox<>();
        jComboBox6 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(new ImageIcon(getClass().getResource("/Imagenes/icono.png")).getImage());
        setResizable(false);

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });

        jComboBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox4ActionPerformed(evt);
            }
        });

        jComboBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox5ActionPerformed(evt);
            }
        });

        jComboBox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox6ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Municipio:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Zona:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Manzana:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Lote:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Edificio:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Departamento:");

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton1.setText("Generar");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton2.setText("Cancelar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton3.setText("Validar");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton4.setText("Respaldar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/logo-inegi.png"))); // NOI18N

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Tabla:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("texto");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setText("Base de Datos:");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setText("texto");

        jMenu1.setText("Opciones");

        jMenuItem1.setText("Respaldar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Validar");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);
        jMenu1.add(jSeparator1);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        jMenuItem3.setText("Cancelar");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jComboBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jComboBox4, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jComboBox6, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton1)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel11))))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBox5)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBox6)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //Municipio
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        agregarQuitarItemsElemento(0);
    }//GEN-LAST:event_jComboBox1ActionPerformed

    //Zona
    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        agregarQuitarItemsElemento(1);
    }//GEN-LAST:event_jComboBox2ActionPerformed

    //Manzana
    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        agregarQuitarItemsElemento(2);
    }//GEN-LAST:event_jComboBox3ActionPerformed

    //Lote
    private void jComboBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox4ActionPerformed
        agregarQuitarItemsElemento(3);
    }//GEN-LAST:event_jComboBox4ActionPerformed

    //Edificio
    private void jComboBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox5ActionPerformed
        agregarQuitarItemsElemento(4);
    }//GEN-LAST:event_jComboBox5ActionPerformed

    //Departamento
    private void jComboBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox6ActionPerformed
        agregarQuitarItemsElemento(5);
    }//GEN-LAST:event_jComboBox6ActionPerformed

    //Boton cancelar
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        cancelar();
    }//GEN-LAST:event_jButton2ActionPerformed

    //Boton respaldar
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        respaldar();
    }//GEN-LAST:event_jButton4ActionPerformed

    //Boton validar
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        validar();
    }//GEN-LAST:event_jButton3ActionPerformed

    //Boton generar
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        generar();
    }//GEN-LAST:event_jButton1ActionPerformed

    //Item del menu para respaldar
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        respaldar();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    //Item del menu para validar
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        validar();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    //Item del menu para cancelar
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        cancelar();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Generar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Generar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Generar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Generar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Generar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JComboBox<String> jComboBox5;
    private javax.swing.JComboBox<String> jComboBox6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    // End of variables declaration//GEN-END:variables
    
    /***************************************************************************
     * METODOS PARA REALIZAR TAREAS ESPECIFICAS
     * *************************************************************************
     */
    
    
    /**
     * Usado por: Constructor
     * Definicion: Metodo que agrega los items de los campos de inicio a todos los combos
     */
    private void agregarItems() {
        //Agregar el item predeterminado de "Selecciona uno.." a los combos
        for (int i = 0; i < combos.length; i++) {
            combos[i].addItem(Variables.NAME_FIRST_ITEM);
        }
        
        //Crear el objeto para obtener el nombre de los campos de la tabla
        Base datosBase = new Base();
        
        //Obtener los nombres de los campos de la tabla
        ArrayList<String> nombreColumnas = datosBase.getColumnsNames(usuario, password, base, tabla);
        
        //Agregar todos los campos de la tabla a todos los combos
        for (int i = 0; i < combos.length; i++) {
            for (int j = 0; j < nombreColumnas.size(); j++) {
                combos[i].addItem(nombreColumnas.get(j));
            }
        }
    }
    
    /**
     * Usado por: Todos los combos
     * Definicion: Metodo que agrega o quita items de los combos segun se vayan seleccionando
     * @param numeroCombo: Combo que llama al metodo
     */
    private void agregarQuitarItemsElemento(int numeroCombo) {
        //Obtener el texto del item seleccionado
        String itemCadena = combos[numeroCombo].getSelectedItem().toString();
        //Obtener el indice del item seleccionado
        int itemNumero = combos[numeroCombo].getSelectedIndex();
        
        //En caso de que se seleccione el predeterminado y no haya ningun item seleccionado previamente
        //Es decir, sea la primera vez que se selecciona un item (Esto ocurre cuando se carga la ventana)
        if(itemNumero == 0 && seleccionAnterior[numeroCombo] == null){
            
            //Poner el item como anterior para futuras selecciones
            seleccionAnterior[numeroCombo] = itemCadena;
            posicionAnterior[numeroCombo] = itemNumero;
            
        //En caso de que se seleccione el predeterminado y el anterior sea cualquier otro
        //Es decir, paso de estar en algun item a el predeterminado
        } else if(itemNumero == 0 && !seleccionAnterior[numeroCombo].equals(Variables.NAME_FIRST_ITEM)) {
            
            //Agregar el item anteriormente seleccionado a los combos, sin eliminar el actual
            for (int i = 0; i < combos.length; i++) {
                if(i != numeroCombo){
                    combos[i].addItem(seleccionAnterior[numeroCombo]);
                    //agregarItem(numeroCombo, seleccionAnterior[numeroCombo], posicionAnterior[numeroCombo]);
                }
            }
            
            //Poner el item como anterior
            seleccionAnterior[numeroCombo] = itemCadena;
            posicionAnterior[numeroCombo] = itemNumero;
            
        //En caso de que se seleccione cualquier item menos el predeterminado y el anterior sea el predeterminado
        //Es decir, paso de estar en el predeterminado a algun otro
        } else if(itemNumero != 0 && seleccionAnterior[numeroCombo].equals(Variables.NAME_FIRST_ITEM)){
            
            //Remover el item actual de los combos, sin agregar el anterior
            for (int i = 0; i < combos.length; i++) {
                if(i != numeroCombo){
                    combos[i].removeItem(itemCadena);
                    //removerItem(numeroCombo, seleccionAnterior[numeroCombo]);
                }
            }
            
            //Poner el item como anterior
            seleccionAnterior[numeroCombo] = itemCadena;
            posicionAnterior[numeroCombo] = itemNumero;
            
        //En caso de que se seleccione cualquier item menos el predeterminado y el anterior tambien sea cualquiera menos el predeterminado
        //Es decir, paso de estar en algun campo a algun otro campo
        } else if (itemNumero != 0 && !seleccionAnterior[numeroCombo].equals(Variables.NAME_FIRST_ITEM)) {
            
            //Añadir el item anterior y eliminar el item actual de los combos
            for (int i = 0; i < combos.length; i++) {
                if(i != numeroCombo){
                    combos[i].addItem(seleccionAnterior[numeroCombo]);
                    combos[i].removeItem(itemCadena);
                    //agregarRemoverItem(numeroCombo, seleccionAnterior);
                }
            }
            
            //Poner el item como anterior
            seleccionAnterior[numeroCombo] = itemCadena;
            posicionAnterior[numeroCombo] = itemNumero;
        }
    }
    
    /**
     * Usado por: validar
     * Definicion: Metodo que determina si una cadena es de solo numeros o no
     * @param cadena: Cadena que se especifica si es solo de numeros
     * @return 
     */
    private boolean esNumero(String cadena){
        //Almacenara si la cadena es o no un numero
        boolean resultado = true;
        try {
            //Hacemos la conversion de tipo de cadena a numero
            int numero = Integer.parseInt(cadena);
            
        //En caso de que ocurra algun error
        } catch (Exception e) {
            //La cadena contiene algun caracter, no es un numero
            resultado = false;
        }
        //Rgresamos si es o no numero
        return resultado;
    }

    /**
     * Usado por: validar
     * Descripcion: Metodo que obtiene los errores de tipo nulos de un campo
     * @param opcion: Campo a validar
     * @return 
     */
    private int obtenerErrorNull(String opcion) {
        //Almacenara los errores encontrados
        int errores = 0;
        //Definimos la consulta sql que obtendra los errores
        String sql = ""
                + "select count(*) as total "
                + "from " + tabla 
                + " where " + opcion + " is null";
        
        try {
            //Obtenemos la conexion y ejecutamos la consulta
            Connection con = conexion.getConexion();
            Statement comando = con.createStatement();
            ResultSet registro = comando.executeQuery(sql);
            
            //Obtenemos los registros con valor nulo
            if(registro.next()){
                errores = registro.getInt("total");
            }
            
        //En caso de que ocurra algun error en la consulta
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(
                    this,
                    "Error al obtener valores nulos\n" + e.toString(), 
                    Variables.MSG_TITLE_ERROR_PADRON, 
                    JOptionPane.ERROR_MESSAGE
            );
        }
        
        //Devolvemos el numero de errores
        return errores;
    }
    
    /**
     * Usado por: validar
     * Definicion: Metodo que obtiene los errores de tipo vacio de un campo
     * @param opcion: Campo a validar
     * @return 
     */
    private int obtenerErrorVacio(String opcion) {
        //Almacenara los errores encontrados
        int errores = 0;
        //Definimos la consulta sql que obtendra los errores
        String sql = ""
                + "select count(*) as total "
                + "from " + tabla 
                + " where " + opcion + " like ''";
        
        try {
            //Obtenemos la conexion y ejecutamos la consulta
            Connection con = conexion.getConexion();
            Statement comando = con.createStatement();
            ResultSet registro = comando.executeQuery(sql);
            
            //Obtenemos los registros que esten vacios
            if(registro.next()){
                errores = registro.getInt("total");
            }
            
        //En caso de que ocurra algun error en la consulta
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(
                    null, 
                    "Error al obtener valores vacios\n" + e.toString(), 
                    Variables.MSG_TITLE_ERROR_PADRON, 
                    JOptionPane.ERROR_MESSAGE
            );
        }
        
        //Devolvemos la cantidad de errores encontrados
        return errores;
    }
    
    /**
     * Usado por: WorkerRespaldar
     * Definicion: Metodo que crea una copia de la tabla seleccionada
     */
    private void respaldarProceso(){
        //Definimos la sentencia que creara la copia de la tabla
        String sql = ""
                + "create table " + tabla + Variables.NAME_STRING_END_SUPPORT + " "
                + "select * from " + tabla;
        try {
            //Obtenemos la conexion y ejecutamos la sentencia
            Connection con = conexion.getConexion();
            Statement comando = con.createStatement();
            int i = comando.executeUpdate(sql);
            
            //Mostramos el mensaje correspondiente
            JOptionPane.showMessageDialog(
                    null, 
                    "Respaldo creado con exito", 
                    Variables.MSG_TITLE_NORMAL_PADRON, 
                    JOptionPane.INFORMATION_MESSAGE
            );
            
        //En caso de que ocurra algun error en la sentencia
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(
                    null, 
                    "Error al crear resapaldo\n" + ex.toString(), 
                    Variables.MSG_TITLE_ERROR_PADRON, 
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }
    
    /**
     * Usado por: WorkerGenerar
     * Definicion: Metodo que genera la clave catastral
     * @param campo: Campo nuevo que tendra la clave catastral
     * @param campos: Nombres de los campos que eligio el usuario
     */
    private void generarProceso(String campo, String[] campos){
        //Almacenara las consultas
        String sql;
        //Almacenara el resultado de las consultas
        int ejecutar;
        
        try {
            //Obtener la conexion
            Connection con = conexion.getConexion();
            Statement comando = con.createStatement();
            
            if(jComboBox5.getSelectedIndex() == 0 || jComboBox6.getSelectedIndex() == 0){
                sql = ""
                    + "alter table " + tabla + " "
                    + "add column " + campo + " varchar(16) "
                    + "after " + campos[3];
            } else {
                sql = ""
                    + "alter table " + tabla + " "
                    + "add column " + campo + " varchar(16) "
                    + "after " + campos[5];
            }
            //Consulta que genera el nuevo campo despues de depto
            ejecutar = comando.executeUpdate(sql);
            
            //Consulta que genera la clave catastral
            if(jComboBox5.getSelectedIndex() == 0 || jComboBox6.getSelectedIndex() == 0){
                sql = ""
                    + "update " + tabla + " "
                    + "set " + campo + " = concat("
                        + "lpad(" + campos[0] + ", 3, '0'),"
                        + "lpad(" + campos[1] + ", 2, '0'),"
                        + "lpad(" + campos[2] + ", 3, '0'),"
                        + "lpad(" + campos[3] + ", 2, '0'),"
                        + "'00',"
                        + "'0000'"
                    + ")";
            } else {
                sql = ""
                    + "update " + tabla + " "
                    + "set " + campo + " = concat("
                        + "lpad(" + campos[0] + ", 3, '0'),"
                        + "lpad(" + campos[1] + ", 2, '0'),"
                        + "lpad(" + campos[2] + ", 3, '0'),"
                        + "lpad(" + campos[3] + ", 2, '0'),"
                        + "lpad(" + campos[4] + ", 2, '0'),"
                        + "lpad(" + campos[5] + ", 4, '0')"
                    + ")";
            }
            ejecutar = comando.executeUpdate(sql);
            
            //Mostramos los mensajes correspondientes
            JOptionPane.showMessageDialog(
                    this, 
                    "Clave catastral generada con exito",
                    Variables.MSG_TITLE_NORMAL_PADRON,
                    JOptionPane.INFORMATION_MESSAGE
            );
            JOptionPane.showMessageDialog(
                    this, 
                    "Para finalizar debes ver los datos generados",
                    Variables.MSG_TITLE_NORMAL_PADRON,
                    JOptionPane.INFORMATION_MESSAGE
            );
            
            //Pasamos a la ventana que visualiza la tabla
            Visualizador visualizador = new Visualizador(usuario, password, base, tabla);
            visualizador.show();
            this.dispose();
            
        //En caso de que ocurra algun error con las consultas
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(
                    this, 
                    "Error al generar la clave\n" + e.toString(),
                    Variables.MSG_TITLE_ERROR_PADRON,
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }
    
    /**
     * Usado por
     * Definicion
     */
    private boolean empiezaNumero(String cadena){
        boolean empieza = false;
        if (cadena.charAt(0) == '0' || cadena.charAt(0) == '1' || cadena.charAt(0) == '2' || cadena.charAt(0) == '3' || 
                cadena.charAt(0) == '4' || cadena.charAt(0) == '5' || cadena.charAt(0) == '6' || 
                cadena.charAt(0) == '7' || cadena.charAt(0) == '8' || cadena.charAt(0) == '9') {
                empieza = true;
            }
        return empieza;
    }
    
    
    /***************************************************************************
     * METODOS DE LOS BOTONES
     * *************************************************************************
     */
    
    
    /**
     * Usado por: Boton de respaldar e Item del menu para respaldar
     * Definicion: Metodo que hace una copia de la tabla original como respaldo
     */
    private void respaldar() {
        //Almacenara si existe el respaldo de la tabla
        boolean existe_tabla = false;
        //Definimos la consulta para obtener las tablas de la base
        String sql = "show tables";
        
        try {
            //Obtenemos la conexion y ejecutamos la consulta
            Connection con = conexion.getConexion();
            Statement comando = con.createStatement();
            ResultSet registro = comando.executeQuery(sql);
            
            //Mientras existan tablas
            while (registro.next()){
                //Obtenemos el nombre de la tabla
                String r = registro.getString("Tables_in_" + base);
                //En caso de que la tabla tenga en su nombre _respaldo_apc despues del nombre de la tabla
                if(r.equalsIgnoreCase(tabla + Variables.NAME_STRING_END_SUPPORT)){
                    //La tabla ya tiene respaldo
                    existe_tabla = true;
                }
            }
            
        //En caso de ocurrir algun error en la consulta
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(
                    this, 
                    "Error al encontrar respaldos\n" + e.toString(), 
                    Variables.MSG_TITLE_ERROR_PADRON, 
                    JOptionPane.ERROR_MESSAGE
            );
        }
        
        //En caso de que la tabla tenga respaldo
        if(existe_tabla){
            JOptionPane.showMessageDialog(
                    null, 
                    "Ya existe un respaldo de la tabla", 
                    Variables.MSG_TITLE_NORMAL_PADRON, 
                    JOptionPane.INFORMATION_MESSAGE
            );
            
        } else {
            //Realizar el respaldo de la tabla
            WorkerRespaldar worker = new WorkerRespaldar();
            worker.execute();
        }
        
        //Habilitar el boton de validar
        jButton3.setEnabled(true);
        //Deshabilitar el boton respaldar
        jButton4.setEnabled(false);
    }
    
    /**
     * Usado por: Boton de validar e Item del menu para validar
     * Definicion: Metodo que valida los campos seleccionados de la tabla
     */
    private void validar() {
        //En caso que no se haya seleccionado algun campo
        if(jComboBox1.getSelectedIndex() == 0 ||
                jComboBox2.getSelectedIndex() == 0 ||
                jComboBox3.getSelectedIndex() == 0 ||
                jComboBox4.getSelectedIndex() == 0)
        {
            
            JOptionPane.showMessageDialog(
                    this, 
                    "Debes seleccionar los campos para las opciones", 
                    Variables.MSG_TITLE_ERROR_PADRON, 
                    JOptionPane.ERROR_MESSAGE
            );
            
        //En caso de tener todos los campos seleccionados
        } else {
            //Obtener el campo seleccionado en cada combo
            String municipio = jComboBox1.getSelectedItem().toString();
            String zona = jComboBox2.getSelectedItem().toString();
            String manzana = jComboBox3.getSelectedItem().toString();
            String lote = jComboBox4.getSelectedItem().toString();
            String edificio = jComboBox5.getSelectedItem().toString();
            String depto = jComboBox6.getSelectedItem().toString();
            
            //Pedir el valor que tendran todos los registros en el municipio
            String opcion = JOptionPane.showInputDialog(
                    this, 
                    "¿Cual es el valor del municipio?", 
                    Variables.MSG_TITLE_NORMAL_PADRON, 
                    JOptionPane.QUESTION_MESSAGE
            );
            
            try {
                //En caso de que no se ingrese nada, solo espacios o que no sea un numero
                while(opcion.trim().length() == 0 || esNumero(opcion) == false){
                    
                    //Mostrar mensaje en caso de que no se ingrese nada
                    if(opcion.trim().length() == 0){
                        JOptionPane.showMessageDialog(
                                this, 
                                "Debes ingresar informacion", 
                                Variables.MSG_TITLE_ERROR_PADRON, 
                                JOptionPane.ERROR_MESSAGE
                        );
                        
                    //Mostrar mensaje en caso de que no sea un numero
                    } else if(esNumero(opcion) == false){
                        JOptionPane.showMessageDialog(
                                this, 
                                "Debes ingresar un numero", 
                                Variables.MSG_TITLE_ERROR_PADRON, 
                                JOptionPane.ERROR_MESSAGE
                        );
                    }
                    
                    //Volver a pedir el valor del municipio
                    opcion = JOptionPane.showInputDialog(
                            this, 
                            "¿Cual es el valor del municipio?", 
                            Variables.MSG_TITLE_NORMAL_PADRON, 
                            JOptionPane.QUESTION_MESSAGE
                    );
                }
                
            //En caso de que oprima cancelar opcion sera null
            } catch (Exception e) {}
            
            //En caso de que haya ingresado algun valor valido
            if(opcion != null){
                //Pasar a numero el valor de la cadena
                int numero = Integer.parseInt(opcion);
                //Confirmar la validacion
                int confirmacion = JOptionPane.showConfirmDialog(
                        this, 
                        "¿Desea continuar con la validacion?", 
                        Variables.MSG_TITLE_NORMAL_PADRON, 
                        JOptionPane.YES_NO_OPTION
                );
                
                //En caso de que elija si continuar
                if(confirmacion == JOptionPane.YES_OPTION){
                    //Definir la sentencia que cambia el valor del municipio a todos los registros
                    String sql = ""
                            + "update " + tabla 
                            + " set " + municipio + " = '" + numero + "'";
                    
                    try {
                        //Obtener la conexion y ejecutar la sentencia
                        Connection con = conexion.getConexion();
                        Statement comando = con.createStatement();
                        int i = comando.executeUpdate(sql);
                        
                        //Definir lo objetos que almacenaran los errores
                        int[] erroresNulos = new int[5];
                        int[] erroresVacios = new int[5];
                        
                        //Obtener los errores nulos de todos los campos
                        erroresNulos[0] = obtenerErrorNull(zona);
                        erroresNulos[1] = obtenerErrorNull(manzana);
                        erroresNulos[2] = obtenerErrorNull(lote);
                        
                        //Obtener de edificio y depto solo en caso de seleccionar algo
                        if(jComboBox5.getSelectedIndex() != 0 && jComboBox6.getSelectedIndex() != 0){
                            erroresNulos[3] = obtenerErrorNull(edificio);
                            erroresNulos[4] = obtenerErrorNull(depto);
                        }
                        
                        
                        //Obtener los errores vacios de todos los campos
                        erroresVacios[0] = obtenerErrorVacio(zona);
                        erroresVacios[1] = obtenerErrorVacio(manzana);
                        erroresVacios[2] = obtenerErrorVacio(lote);
                        //Obtener de edificio y depto solo en caso de seleccionar algo
                        if(jComboBox5.getSelectedIndex() != 0 && jComboBox6.getSelectedIndex() != 0){
                            erroresVacios[3] = obtenerErrorVacio(edificio);
                            erroresVacios[4] = obtenerErrorVacio(depto);
                        }
                        
                        String mensaje = "";
                        if(jComboBox5.getSelectedIndex() != 0 && jComboBox6.getSelectedIndex() != 0){
                            //Mostrar un mensaje con los errores obtenidos
                            mensaje = "Se obtuvieron los siguientes errores:"
                                    + "\nZona:      " + erroresNulos[0] + " nulos y " + erroresVacios[0] + " vacios"
                                    + "\nManzana:   " + erroresNulos[1] + " nulos y " + erroresVacios[1] + " vacios"
                                    + "\nLote:      " + erroresNulos[2] + " nulos y " + erroresVacios[2] + " vacios"
                                    + "\nEdificio:  " + erroresNulos[3] + " nulos y " + erroresVacios[3] + " vacios"
                                    + "\nDepto:     " + erroresNulos[4] + " nulos y " + erroresVacios[4] + " vacios";
                        } else {
                            //Mostrar un mensaje con los errores obtenidos
                            mensaje = "Se obtuvieron los siguientes errores:"
                                    + "\nZona:      " + erroresNulos[0] + " nulos y " + erroresVacios[0] + " vacios"
                                    + "\nManzana:   " + erroresNulos[1] + " nulos y " + erroresVacios[1] + " vacios"
                                    + "\nLote:      " + erroresNulos[2] + " nulos y " + erroresVacios[2] + " vacios"
                                    + "\nEdificio:  Sin dato"
                                    + "\nDepto:     Sin dato";
                        }

                        JOptionPane.showMessageDialog(
                                this, 
                                new JTextArea(mensaje), 
                                Variables.MSG_TITLE_NORMAL_PADRON, 
                                JOptionPane.INFORMATION_MESSAGE
                        );
                        
                        JOptionPane.showMessageDialog(
                                this, 
                                "Validacion Exitosa", 
                                Variables.MSG_TITLE_NORMAL_PADRON, 
                                JOptionPane.INFORMATION_MESSAGE
                        );
                        jButton1.setEnabled(true);
                        
                    //En caso de que ocurra un error al cambiar el municipio
                    } catch (SQLException e) {
                        JOptionPane.showMessageDialog(
                                this, 
                                "Error al validar el municipio\n" + e.toString(), 
                                Variables.MSG_TITLE_ERROR_PADRON, 
                                JOptionPane.ERROR_MESSAGE
                        );
                    }
                    
                //En caso de elegir la opcion de cancelar
                } else {
                    JOptionPane.showMessageDialog(
                            this, 
                            "Operacion Cancelada", 
                            Variables.MSG_TITLE_NORMAL_PADRON, 
                            JOptionPane.INFORMATION_MESSAGE
                    );
                }
            }
        }
    }

    /**
     * Usado por: Boton de cancela e Item del menu para cancelar
     * Definicion: Metodo que regresa a la ventana de inicio
     */
    private void cancelar() {
        //Creamos el objeto para obtener la lista de bases de datos
        Base base = new Base();
        //Obtenemos la lista de bases de datos
        listaBaseDatos = base.getBases(usuario, password);
        //Regresamos a la ventana de inicio
        Inicio inicio = new Inicio(listaBaseDatos, usuario, password);
        inicio.show();
        this.dispose();
    }

    /**
     * Usado por: Boton de generar
     * Definicion: Metodo que hace las validaciones para generar la clave catastral
     */
    private void generar() {
        //Obtener los campos seleccionados
        String[] campos = new String[6];
        for (int i = 0; i < campos.length; i++) {
            campos[i] = combos[i].getSelectedItem().toString();
        }
        
        //Pedir el nombre del nuevo campo
        String campo = JOptionPane.showInputDialog(
                this, 
                "Ingresa el nombre del campo\nque contendra la clave catastral", 
                Variables.MSG_TITLE_NORMAL_PADRON, 
                JOptionPane.QUESTION_MESSAGE
        );
        
        try {
            //En caso de que no se ingrese nada
            while(campo.trim().length() == 0 || empiezaNumero(campo)){
                //Mostrar el mensaje correspondiente
                if (campo.trim().length() == 0) {
                    JOptionPane.showMessageDialog(
                            this, 
                            "Debes ingresar informacion", 
                            Variables.MSG_TITLE_ERROR_PADRON, 
                            JOptionPane.ERROR_MESSAGE
                    );
                } else {
                    JOptionPane.showMessageDialog(
                            this, 
                            "El nombre no debe empezar con numeros", 
                            Variables.MSG_TITLE_ERROR_PADRON, 
                            JOptionPane.ERROR_MESSAGE
                    );
                }
                
                
                //Pedir nuevamente el nombre del campo
                campo = JOptionPane.showInputDialog(
                        this, 
                        "Ingresa el nombre del campo\nque contendra la clave catastral", 
                        Variables.MSG_TITLE_NORMAL_PADRON, 
                        JOptionPane.QUESTION_MESSAGE
                );
            }
            
        //En caso de que elija cancelar el valor sera null
        } catch (Exception e) {}
        
        //En caso de que ingresa algun dato valido
        if (campo != null) {
            //Generar la clave
            WorkerGenerar worker = new WorkerGenerar(campo, campos);
            worker.execute();
            
        //En caso de que elija cancelar
        } else {
            JOptionPane.showMessageDialog(
                    this, 
                    "Operacion Cancelada", 
                    Variables.MSG_TITLE_NORMAL_PADRON, 
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    
    /***************************************************************************
     * SWING WORKERS PARA LA IMAGEN DE CARGANDO
     * *************************************************************************
     */
    
    
    /**
     * Usado por: respaldar
     * Definicion: Clase que mostrara la ventana de cargando en el proceso de respaldar
     */
    class WorkerGenerar extends SwingWorker<Object, Void> {
        //Ventana que mostrar el gif de cargando
        Cargando cargando;
        //Almacenara el nombre del nuevo campo
        String campo;
        //Almacenara los nombres de los campos seleccionados
        String[] campos;

        public WorkerGenerar(String campo, String[] campos) {
            cargando  = new Cargando(null, false);
            this.campo = campo;
            this.campos = campos;
        }
        
        @Override
        protected Double doInBackground() throws Exception {
            cargando.show();
            generarProceso(campo, campos);
            return 0.0;
        }

        @Override
        protected void done() {
            cargando.dispose();
        }
    }
    
    /**
     * Usado por: respaldar
     * Definicion: Clase que mostrara la ventana de cargando en el proceso de respaldar
     */
    class WorkerRespaldar extends SwingWorker<Object, Void> {
        //Ventana que mostrar el gif de cargando
        Cargando cargando;

        public WorkerRespaldar() {
            cargando  = new Cargando(null, false);
        }
        
        @Override
        protected Double doInBackground() throws Exception {
            cargando.show();
            respaldarProceso();
            return 0.0;
        }

        @Override
        protected void done() {
            cargando.dispose();
        }
    }
}